/*
 * generated by Xtext 2.9.0
 */
package de.htwberlin.selabs.pml.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

import de.htwberlin.selabs.pml.pmlDsl.LitDecl
import de.htwberlin.selabs.pml.pmlDsl.DFuncDecl
import de.htwberlin.selabs.pml.pmlDsl.ArrDecl
import de.htwberlin.selabs.pml.pmlDsl.VarDecl
import de.htwberlin.selabs.pml.pmlDsl.AndFml
import de.htwberlin.selabs.pml.pmlDsl.OrFml
import de.htwberlin.selabs.pml.pmlDsl.BoolConstant
import de.htwberlin.selabs.pml.pmlDsl.IntConstant
import de.htwberlin.selabs.pml.pmlDsl.Compound
import de.htwberlin.selabs.pml.pmlDsl.ArrAccess
import de.htwberlin.selabs.pml.pmlDsl.IFuncDecl
import de.htwberlin.selabs.pml.pmlDsl.InitDecl


/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class PmlDslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(LitDecl ele) {
		'mtype'
	}
	
	def text(DFuncDecl ele) {
		ele.dfunc.name
	}
	
	def text(ArrDecl ele) {
		ele.arr.name + '[]'
	}

	def text(VarDecl ele) {
		'var ' + ele.v.name
	}

	def text(OrFml ele) {
		'||'
	}

	def text(AndFml ele) {
		'&&'
	}

	def text(BoolConstant ele) {
		ele.value
	}

	def text(Compound ele) {
		'(..)'
	}

	def text(IntConstant ele) {
		ele.value + ""
	}

	def text(ArrAccess ele) {
		ele.arr.name + '[]'
	}

	def text(IFuncDecl ele) {
		'inline ' + ele.ifunc.name
	}

	def text(InitDecl ele) {
		'init'
	}

}
