/*
 * generated by Xtext 2.9.0
 */
package de.htwberlin.selabs.pml.validation

import com.google.inject.Inject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import de.htwberlin.selabs.pml.pmlDsl.OrFml
import de.htwberlin.selabs.pml.pmlDsl.PmlDslPackage
import de.htwberlin.selabs.pml.pmlDsl.CompareFml
import de.htwberlin.selabs.pml.pmlDsl.MultDiv
import de.htwberlin.selabs.pml.pmlDsl.ArrAccess
import de.htwberlin.selabs.pml.pmlDsl.AndFml
import de.htwberlin.selabs.pml.pmlDsl.SymbolRef
import de.htwberlin.selabs.pml.pmlDsl.IfCond
import de.htwberlin.selabs.pml.pmlDsl.IFuncAcc
import de.htwberlin.selabs.pml.pmlDsl.AssignmentStmt
import de.htwberlin.selabs.pml.pmlDsl.Lhs
import de.htwberlin.selabs.pml.pmlDsl.DoCond
import de.htwberlin.selabs.pml.pmlDsl.DFuncDecl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PmlDslValidator extends AbstractPmlDslValidator {
	
	public static val WRONG_TYPE = "pml.fml.WrongType"

	@Inject extension PmlDslValidatorHelper
	
	// just to make error accessible from FmlDslValidatorHelper
	def perror(String s, EStructuralFeature f, String id){
		error(s,f,id)
	}
	
	@Check
	def checkType(OrFml e) {
		checkExpectedBoolean(e.left, PmlDslPackage.Literals::OR_FML__LEFT)
		checkExpectedBoolean(e.right, PmlDslPackage.Literals::OR_FML__RIGHT)
	}

	@Check
	def checkType(AndFml e) {
		checkExpectedBoolean(e.left, PmlDslPackage.Literals::AND_FML__LEFT)
		checkExpectedBoolean(e.right, PmlDslPackage.Literals::AND_FML__RIGHT)
	}

	@Check
	def checkType(CompareFml e) {
		checkExpectedInt(e.left, PmlDslPackage.Literals::COMPARE_FML__LEFT)
		checkExpectedInt(e.right, PmlDslPackage.Literals::COMPARE_FML__RIGHT)
	}

	@Check
	def checkType(MultDiv e) {
		checkExpectedInt(e.left, PmlDslPackage.Literals::MULT_DIV__LEFT)
		checkExpectedInt(e.right, PmlDslPackage.Literals::MULT_DIV__RIGHT)
	}

	@Check
	def checkType(ArrAccess e) {
		checkExpectedInt(e.i, PmlDslPackage.Literals::ARR_ACCESS__I)
	}

	@Check
	def checkType(SymbolRef e) {
		e.args.forEach[
		checkExpectedInt(it, PmlDslPackage.Literals::SYMBOL_REF__ARGS)
		]
	}
	
	@Check
	def checkType(IfCond e) {
		checkExpectedBoolean(e.cond, PmlDslPackage.Literals::IF_COND__COND)
	}
	  
	@Check
	def checkType(IFuncAcc e) {
			e.iargs.forEach[
				checkExpectedInt(it, PmlDslPackage.Literals::IFUNC_ACC__IARGS)
			]
	}
	
	@Check
	def checkType(AssignmentStmt e) {
		checkExpectedInt(e.rhs, PmlDslPackage.Literals::ASSIGNMENT_STMT__RHS)
	}
	
	@Check
	def checkType(Lhs e) {
		if (e.idx != null)
		checkExpectedInt(e.idx, PmlDslPackage.Literals::LHS__IDX)
	}
	
	@Check
	def checkType(DoCond e) {
		checkExpectedBoolean(e.cond, PmlDslPackage.Literals::DO_COND__COND)
	}
	
	@Check
	def checkType(DFuncDecl e) {
		checkExpectedBoolean(e.body, PmlDslPackage.Literals::DFUNC_DECL__BODY)
	}
	

}
